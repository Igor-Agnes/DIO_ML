#Separado por etapas.

import pandas as pd
import numpy as np

data = pd.read_csv("credit card.csv") #um exemplo para esse data set pode ser encontra Kaggle (https://www.kaggle.com/account/login?titleType=dataset-downloads&showDatasetDownloadSkip=False&messageId=datasetsWelcome&returnUrl=%2Fdatasets%2Fealaxi%2Fpaysim1%3Fresource%3Ddownload)
print(data.head())

#Chegar se existe valores nulos
print(data.isnull().sum()) 

#Chegar os tipos de transação
type = data["type"].value_counts()
transactions = type.index
quantity = type.values

import plotly.express as px
figure = px.pie(data, 
             values=quantity, 
             names=transactions,hole = 0.5, 
             title="Distribution of Transaction Type")
figure.show()

# Chegar correlação entre os dados e a coluna "éFraude(isFraud)"
correlation = data.corr()
print(correlation["isFraud"].sort_values(ascending=False))

#transformar categorico em numerico
data["type"] = data["type"].map({"CASH_OUT": 1, "PAYMENT": 2, 
                                 "CASH_IN": 3, "TRANSFER": 4,
                                 "DEBIT": 5})
                                 
#Separa a coluna éFradu(isFraud) em fraude(Fraud) e não fraude(No Fraud)                                 
data["isFraud"] = data["isFraud"].map({0: "No Fraud", 1: "Fraud"})
print(data.head())

# Seperar os Dados para treinamento e teste (biblioteca sklearn)
from sklearn.model_selection import train_test_split
x = np.array(data[["type", "amount", "oldbalanceOrg", "newbalanceOrig"]])
y = np.array(data[["isFraud"]])

# Trainando o modelo
from sklearn.tree import DecisionTreeClassifier
xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.10, random_state=42)
model = DecisionTreeClassifier()
model.fit(xtrain, ytrain)
print(model.score(xtest, ytest))

#Prever
#caracteristicas(features) = [type, amount, oldbalanceOrg, newbalanceOrig]
features = np.array([[4, 9000.60, 9000.60, 0.0]])
print(model.predict(features))
